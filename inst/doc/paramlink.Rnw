\documentclass[a4paper]{article}
\usepackage[a4paper,text={16cm,24.5cm},twoside,bindingoffset=1cm]{geometry}
\usepackage{amsmath,amsthm,amssymb,enumerate}

\title{paramlink: An R package for parametric linkage analysis}
\author{Magnus Dehli Vigeland}
%\VignetteIndexEntry{Parametric linkage analysis}
\include{Sweave}
\begin{document}
\maketitle
This document gives an introduction to the R package \verb@paramlink@, which provides various functions for SNP-based parametric linkage analysis, 
including LOD score calculations, power analysis, pedigree manipulation and exploratory methods. Likelihoods are calculated using the Elston-Stewart algorithm.

\section{An example session}\label{intro}
We begin by running through a very simple linkage analysis, in which we load a pedigree, plot it, set the disease model, and calculate the LOD score of a single marker. 

To get started, we load the \verb@paramlink@ package and the toy pedigree given in the \verb@toyped@ dataset:
<<results=hide>>=
library(paramlink)
@
<<>>=
data(toyped)
toyped
@
The pedigree is a data frame whose columns are individual ID, father ID, mother ID, sex (male=1, female=2), 
affection status (healthy=1, affected=2, unknown=0), and
and two columns containing the alleles of a single SNP marker. Individual 2 is homozygous for the '1' allele, 3 and 4 are heterozygous, and individual 1 has a missing allele. 

This is the standard LINKAGE format for pedigrees, but without a "family ID" column. 
(Files with family ID column cause no trouble, see Section \ref{readwrite}.)

Most of the functions in \verb@paramlink@ take as input not data frames but objects of class \verb@linkdat@. A \verb@linkdat@ object is basically a list containing various information about the pedigree, markers and the disease model. We transform the 'toy' data frame to a \verb@linkdat@ object as follows:
<<results=hide>>=
x = linkdat(toyped)
@

To plot the pedigree with genotypes, use the \verb@plot@ method\footnote{The \texttt{plot.linkdat} function this is a wrapper for \texttt{plot.pedigree} in the \texttt{kinship} package.}:
<<eval=F>>=
plot(x, marker=1)
@
\vspace{-3cm}
\begin{center}
<<fig=T,echo=F>>=
plot(x, marker=1, margins=c(10,10,10,10))
@
\end{center}
\vspace{-2.5cm}
The symbols are standard for medical pedigrees: female = circle; male = square; affected by disease = filled, non-affected = open.

The genotype labels can be changed using optional arguments to the \verb@plot@ function. The following example should be fairly self explanatory; see \verb@?plot.linkdat@ for more information:
<<eval=F>>=
plot(x, marker=1, alleles=c('A', 'B'), missing="??", sep=" / ")
@
\vspace{-3cm}
\begin{center}
<<fig=T,echo=F>>=
plot(x, marker=1, alleles=c('A', 'B'), missing="??", sep=" / ", margins=c(10,10,10,10))
@
\end{center}
\vspace{-2.5cm}

 \subsection*{Setting the model}
To perform parametric linkage analysis, a {\em disease model} has to be described. The parameters include whether the disease is autosomal or X-linked, penetrance values, and allele frequencies for the disease and marker loci. In \verb@paramlink@ we set the model using 
the function \verb@setModel@, whose argument \verb@model@ takes an integer value (1-4) with the following meaning:
\begin{enumerate}
\item Autosomal dominant
\item Autosomal recessive
\item X-linked dominant
\item X-linked recessive
\end{enumerate}
If nothing else is indicated, the other parameters are given default values: Full penetrance, no phenocopies, disease allele frequency=0.00001, 
and equifrequent SNP markers (both alleles have frequency 0.5).

For our toy example we want an autosomal dominant model:
<<>>=
x = setModel(x, model=1)
@
This is a good moment to take a look at the \verb@summary@ of the \verb@linkdat@ object, to check that everything is as we expect:
<<>>=
summary(x)
@
Note in particular, the \verb@(f0, f1, f2)@ parameters, which
refer to the standard notation for penetrance values: $$f_i = P(\text{affected}\; | \;\text{$i$ copies of the disease allele}).$$
See Section \ref{setmodel} for how to set model parameters other than the default values.

\subsection*{Calculating the LOD score}%\label{lod}
To calculate the LOD score of the marker in our toy pedigree (with the disease model we just set), simply write
<<>>=
lod(x)
@
By default, the function calculates the LOD scores for each marker for a set of recombination 
fractions\footnote{
Similarly to the MLINK program of the LINKAGE suite.}, and reports the maximum score (0.3 in our example).

We can specify the recombination fraction(s) we want using the \verb@t@ argument. Note also how to suppress the verbose output and instead inspect the LOD scores as a matrix:
<<>>=
lods = lod(x, t=c(0, 0.01, 0.05), silent=T)
lods
@

\section{More about setting the disease model}\label{setmodel}
As explained above, the \verb@model@ argument of \verb@setModel@ offers a very simple way to set one of the four standard models for rare, fully penetrant monogenic diseases. To indicate parameter values other than the defaults, these can be supplied using other arguments of \verb@setModel@, the most important of which are \verb@chrom@ ("autosomal" or "X"),
\verb@penetrances@, \verb@dfreq@ (disease allele frequency) and \verb@afreq@ (marker allele frequencies).
For example, the shortcut we used above for an autosomal dominant model, 
<<>>=
x=setModel(x, model=1)
@
is equivalent to the command
<<>>=
x = setModel(x, chrom="autosomal", penetrances=c(0, 1, 1), 
dfreq=0.00001, afreq=c(0.5, 0.5))
@ 

If \verb@x@ already has a model, \verb@setModel@ uses the existing parameter values for any missing arguments. This makes it easy to change one parameter while keeping everything else as before. For example, the following command alters the penetrances (but nothing else) of \verb@x@'s model, to give 1\% phenocopy rate and 90\% penetrance:
<<>>=
x = setModel(x, penetrances=c(0.01, .9, .9))
x$model
@

For autosomal models, the \verb@penetrances@ argument should always be a vector of length 3, $(f_0, f_1, f_2)$, whose values are assumed to hold for both males and females. In X-linked cases $f_2$ is meaningless for males (having only one X chromosome), and \verb@penetrances@ should be a list of
two vectors, of the form \verb@list(male = c(f0_m, f1_m), female = c(f0_f, f1_f, f2_f))@. For example, the default for X-linked recessive models (model 4) is
\verb@penetrances = list(male = c(0, 1), female = c(0, 0, 1))@.

\section{Computing and plotting LOD scores}\label{lod}
We move on to a more interesting pedigree, contained in \verb@largefam@ dataset. 
<<results=hide>>=
data(largefam)
y=linkdat(largefam, model=1)
@
Notice that the disease model can be set already in the \verb@linkdat@ command, instead of using \verb@setModel@ as an additional step. We set the model to autosomal dominant, which is consistant with the pattern shown in the pedigree:
\begin{center}
<<fig=T, height=4.5>>=
plot(y)
@
\end{center}
Typing \verb@summary(y)@ will show that most of the family members are genotyped with 650 markers. We will compute single-point LOD scores for each marker and plot the results.

As we saw in the first section, the \verb@lod@ function by default computes LOD scores for each marker at the recombination fractions 0, 0.1, 0.2 and 0.5. In this example we will start by overriding this, testing only for complete linkage (recombination fraction equal to 0):
<<>>=
lods0 = lod(y, t=0)
@
The results show a maximum LOD score of 1.8, obtained by the 309'th marker.

The output of any call to \verb@lod@ is an object of class \verb@linkres@, for which a plot method has been written. Hence to visualize the LOD scores it suffices to write:
\begin{center}
<<fig=T, height=3.5>>=
plot(lods0)
@
\end{center}

\noindent
Note: The genomic positions of the 650 markers is not part of the \verb@largefam@ dataset. Hence the x-axis shows only the numbers 1-650.

Instead of specifying a set of fixed 
recombination fractions, we can let the program find the optimal recombination fraction for each marker. This is implemented by first computing a 
maximum likelihood estimate of \verb@t@ (using R's own \verb@optimize@), given the pedigree and the marker genotypes,
and then computing the LOD score for this recombination fraction\footnote{
This is similar to the ILINK program in the LINKAGE suite.}. 
This behavior is achieved by setting \verb@t="max"@, and is somewhat more time consuming than the approach above.
\begin{center}
<<fig=T, height=3.5>>=
lods.max = lod(y, t="max")
plot(lods.max)
@
\end{center}

We see that the linkage peak is the same as before, but the curve looks rather different: While many LOD scores for $t=0$ are negative (in fact $-\infty$ if the genotypes are incompatible with zero recombinations), the \verb@t="max"@ approach always gives $LOD\geq 0$ (since $t=0.5$ implies $LOD=0$).

Finally, note that \verb@lod@ takes an optional argument \verb@markers@ where the user can specify a subset of markers. 
LOD scores are then computed for these markers only. For example, let's zoom in on the markers surrounding number 309:
<<>>=
lods.peak = lod(y, t="max", markers=306:312)
lods.peak
@

\subsection*{A more advanced example: Varying the penetrance}
To main strength of \verb@paramlink@ is of course the environment within which it exists: R itself. In this section we 
give a quick example of combining \verb@paramlink@ with basic R functionality.

We address the following question: For the \verb@largefam@ dataset we analysed above -- what happens to the LOD score peak if 
we vary the model parameters? In particular we will look at allowing reduced penetrance.

Reducing the penetrance is done by setting \verb@penetrances=@\verb@c(0, f, f)@, where \verb@f@ is some number less than 1. 
Instead of doing this one value at a time, we take advantage of R's \verb@sapply@. The code below assumes \verb@y@ is as 
in the previous section. We use \verb@t=0@ to save time; \verb@t="max"@ would of course also work. The argument \verb@max.only=T@ forces \verb@lod@ to return only the maximum LOD score, instead of all the scores collected in a \verb@linkres@ object.
\begin{center}
<<fig=T, height=3.5>>=
penet = seq(from=0.1, to=1, by=0.05)
maxlod = sapply(penet, function(f) {
		z = setModel(y, penetrances=c(0,f,f)) 
		lod(z, t=0, max.only=T)
		})
plot(penet, maxlod, type="l")
@
\end{center}
The result is quite interesting: The LOD score peak gets higher when we reduce the penetrance. This suggests that something is wrong: 
Either the model is incorrect (i.e. disease is not autosomal dominant) or perhaps there are mistakes in the pedigree. We will come back to
this in Section \ref{power}.

\section{Genotype probability distributions}
A novel feature of \verb@paramlink@ is the possibility of computing genotype probability distributions for specified individuals, conditional on pedigree/disease/partial marker data.

For an example we go back to the toy pedigree and make up a different marker. Note how \verb@setMarkers@
works: Its input is an existing \verb@linkdat@ object and a matrix containing the alleles (one row for each individual; two columns), and outputs a \verb@linkdat@ object with the given genotypes. The default symbol for missing alleles is 0.
<<>>=
toy = linkdat(toyped, model=1)
new.marker = rbind(c(0, 0), c('A', 0), c('A', 0), c('B', 0))
new.marker
toy = setMarkers(toy, new.marker)
@
After setting a new marker it's a good idea to check the result by plotting the pedigree:
<<eval=F>>=
plot(toy, marker=1)
@
\vspace{-3cm}
\begin{center}
<<fig=T,echo=F>>=
plot(toy, marker=1, margins=c(10,10,10,10))
@
\end{center}
\vspace{-2.5cm}
@

What is the probability that -- independently of the disease -- individual 3 is homozygous for the $A$ allele? The \verb@genoDistr@ function gives the answer:
<<>>=
genoDistr(toy, id=3, partialmarker=1)
@

Hence the probability that individual 3 is homozygous is 28\%. The default behavior of \verb@genoDistr@ is to assume the marker is unlinked to the disease, i.e. recombination fraction $t=0.5$. However, the user can specify any recombination fraction. For example, given that the marker we created is completely linked to the disease ($t=0$), the genotype probability distribution of individual 3 is:
<<>>=
genoDistr(toy, id=3, partialmarker=1, t=0)
@
 
\section{Power calculations}\label{power}
The questions usually addressed in power analyses for linkage projects are 
\begin{enumerate}
\item What is the {\em maximum} LOD score obtainable in a given pedigree for a marker completely linked to the disease? 
\item What is the {\em expected} LOD score (the ELOD) for a completely linked marker?
\end{enumerate}
For non-trivial cases a simulation based approach is normally used to answer these. In \verb@paramlink@ this is implemented in the \verb@linkage.power@ function, which simulates a specified number of SNPs conditional on the pedigree, disease and model data\footnote{Using a similar algorithm as the SLINK program in the LINKAGE/FASTLINK suite.}, and summarizes the LOD scores for these markers.

As an example, let us return to the \verb@largefam@ pedigree, and run a power analysis for this pedigree:
<<>>=
linkage.power(y)
@

By default, only those individuals that were originally genotyped, are simulated. We could change this by adding an argument \verb@all=TRUE@, 
or by setting \verb@y@'s simulation vector \verb@y$sim@ (see next section).

The default number of simulated markers is 100. To specify a different number, use the \verb@N@ argument. For a family of this size it is advisable to simulate a lot more than 100 markers. 

Also we could inquire how many of the markers 
exceed 3 (a commonly used significance threshold for autosomal disease models) or any other threshold. This is done by including the argument \verb@threshold=3@ in the function call. 

Finally, to generate reproducible output it can be a good idea to set the seed for the random number generator manually, using the \verb@seed@ argument. 

To sum up, a typical call to \verb@linkage.power@ would be something like this (but with a much larger value of $N$):
<<>>=
simLODs = linkage.power(y, N=5, threshold=3, seed=1111)
simLODs
@

Comparing the result of the power analyses above with the LOD scores in Sect. \ref{lod} we see that none of the real markers came close to the maximum of 3.6. 
As it turns out, two of the family members (6 and 12) were wrongly diagnosed; they should be marked as affected. We fix this using the 
\verb@modifyPedigree@ command (see Sect. \ref{manip})
<<>>=
y=modifyPedigree(y, c(6,12), 'AFF')
@

Computing the LOD scores using the modified pedigree gives more promising results:
\begin{center}
<<fig=T, height=3.5>>=
lods = lod(y, t="max")
plot(lods)
@
\end{center}

\subsection{An example with X-linked disease}
In this section we perform a power analysis of the \verb@Xped@ pedigree included in the package. This is a complex pedigree with several half-sibships. 
The disease pattern is consistent with an X-linked recessive inheritance mode, so we indicate this as our model (cf. Section \ref{intro}):
<<>>=
data(Xped)
z = linkdat(Xped, model=4, verbose=F)
@
<<eval=F>>=
plot(z)
@
\vspace{-1.cm}
\begin{center}
<<fig=T,echo=F,height=4.5>>=
plot(z, symbolsize=1.4)
@
\end{center}
@

Let's check the maximum LOD score:
<<>>=
linkage.power(z)
@

What would the power be if only the boys 12-14 were available for genotyping? By default, genotypes for all individuals are simulated, 
but we can change this by setting the \verb@sim@ vector of \verb@z@. This vector should consist of 2's and 0's, meaning 
{\em included} and {\em not included} respectively.
<<>>=
z$sim = rep(0,15)
z$sim[12:14] = 2
linkage.power(z)
@

As we see, the maximum LOD score using only the boys is 0.6, only half of what we can achieve with everyone included. 
(Of course some members of the family do not contribute any linkage information, e.g. male founders without daughters, 
so including {\em everyone} would be a waste of time and resources.)

\section{Reading and writing files}\label{readwrite}
The package includes the functions \verb@read.linkdat@ and \verb@write.linkdat@ for reading and writing pedigree files in LINKAGE format.
These functions are basically wrappers for \verb@read.table@ and \verb@write.table@.

As an example we will write the \verb@toyped@ pedigree to a file called "test.ped":
<<results=hide>>=
data(toyped)
x = linkdat(toyped)
write.linkdat(x, file="test.ped")
@

By default the resulting pedfile is in accordance with traditional (pre-makeped) LINKAGE format: No column headers, and family ID as the first column. (This column will always be all 1's, since \verb@linkdat@ objects contain only one family.) These actions can be controlled by using the optional arguments \verb@col.names@ and \verb@famid@:
<<>>=
write.linkdat(x, file="test2.ped", famid=F, col.names=T)
@ 

Reading pedigree files is equally simple. To read the files "test.ped" and "test2.ped" we just created (the resulting \verb@linkdat@ objects will be equal), the appropriate commands are
<<eval=F>>=
x1 = read.linkdat(file="test.ped")
x2 = read.linkdat(file="test2.ped", header=T)
@ 

If the input file contains a family ID column, this will be detected automatically.
If the file contains a column indicating simulation status (this should be in SLINK format: 0=not included, 2=included),
the user must specify the column number using the \verb@simcol@ argument of \verb@read.linkdat@. See help files for details. 

\section{Pedigree creation and manipulation}\label{manip}
As an alternative to writing a ped-file describing your pedigree in LINKAGE format, it is often convenient to let \verb@paramlink@ 
create the pedigree for you. There are also several functions for modifying both the pedigree and the marker alleles of existing \verb@linkdat@ objects. All of these should be fairly easy to understand from their help pages, so we will just give a few simple examples.

The basic functions for {\em creating} pedigrees are \verb@nuclearPed@ and \verb@cousinPed@.
The former makes a nuclear family with a specified number of male and female offspring, while the latter makes a pedigree linking two cousins
of the specified degree. The output of both functions are \verb@linkdat@ objects with no model set and with all individuals non-affected.

Functions for {\em manipulating} pedigrees include \verb@addChildren@ (which adds a specified number of offspring to the indicated parents), \verb@modifyPedigree@ (for changing either the sex or affection status of the specified individuals),
\verb@removeIndiv@ (removes an individual and all its descendants) and \verb@subset.linkdat@ (for extracting a sub-pedigree and/or a subset of the markers).

For manipulating the marker data of a \verb@linkdat@ object, use \verb@modifyMarker@ (to modify the alleles of a single marker) and \verb@setMarkers@ (to reset all the marker info).

It should be noted that all of these functions -- like \verb@setModel@ -- return new \verb@linkdat@ objects, i.e., they do not do in-place modifications. Hence their output should always be stored in some variable. 
We conclude this section with an example to give a rough idea of how to use some of these functions. First, let's create a pedigree of a nuclear family with 
two affected boys and three non-affected girls:
<<>>=
a=nuclearPed(boys=2, girls=3)
a=modifyPedigree(a, id=c(1, 4), 'AFF')
@
<<eval=F>>=
plot(a)
@
\vspace{-2cm}
\begin{center}
<<fig=T,echo=F,height=3.2>>=
plot(a, symbolsize=1.4)
@
\end{center}
\vspace{-.5cm}
Now let's do a few changes:\\
Give individual 4 two affected children, one boy and one girl. Note: \verb@mother=0@ creates a new founder. 
<<>>=
a=addChildren(a, father = 4, mother = 0, children = 2, sex = c(1,2),  aff = 2)
@
Create a marker for which everyone is homozygous $AA$:
<<>>=
a=setMarkers(a, matrix("A", nrow=10, ncol=2))
@
Making individuals 1,4 and 10 heterozygous, and giving 9 a missing allele:
<<>>=
a=modifyMarker(a, id=c(1, 4, 10), alleles=c("A", "B"))
a=modifyMarker(a, id=9, alleles=c("A", 0))
@
Removing individual 7:
<<>>=
a=removeIndiv(a, 7)
@

The new pedigree looks like this:
\begin{center}
<<fig=T,height=5>>=
plot(a, marker=1)
@
\end{center}
\end{document}